.popup {
  height: 100vh;
  width: 100%;
  position: fixed;
  top: 0;
  left: 0;
  background-color: rgba($color-black, 0.8);
  z-index: 9999;

  // NOTE - display: none is not best way since we cannot animate since there is no number
  // display: none;
  opacity: 0;
  visibility: hidden;

  transition: all 0.3s;

  // NOTE - implementing Graceful Degradation
  // Graceful degradation is to implement newest features in moder browsers, but falls back
  // to normal layout in the older browsers

  // @supports CSS at-rule lets you specify declarations that depend on a browser's support for one or more specific CSS features. This is called a feature query. The rule may be placed at the top level of your code or nested inside any other conditional group at-rule.
  @supports (-webkit-backdrop-filter: blur(10px)) or (backdrop-filter: blur(10px)) {
    // if browser supports these features, apply this code

    // backdrop-filter CSS property lets you apply graphical effects such as blurring or color shifting to the area behind an element. Because it applies to everything behind the element, to see the effect you must make the element or its background at least partially transparent.
    -webkit-backdrop-filter: blur(10px);
    backdrop-filter: blur(10px);
    background-color: rgba($color-black, 0.3);
  }

  // since this a target anchor element - 'target' psedo class is available to redirect
  &:target {
    opacity: 1;
    visibility: visible;
  }

  // when popup shows up
  &:target &__content {
    opacity: 1;
    transform: translate(-50%, -50%) scale(1);
  }

  // close up - redirect to new target element on close to remove above taret element
  &__close {
    &:link,
    &:visited {
      color: $color-grey-dark;
      position: absolute;
      top: 2.5rem;
      right: 2.5rem;
      font-size: 3rem;
      text-decoration: none;
      display: inline-block;
      transition: all 0.2s;
      line-height: 1;
    }

    &:hover {
      color: $color-primary;
    }
  }

  &__content {
    width: 75%;

    background-color: $color-white;
    box-shadow: 0 2rem 4rem rgba($color-black, 0.2);
    border-radius: 3px;

    position: absolute;
    top: 50%;
    left: 50%;

    // NOTE - CAN'T USE TWO TRANSORMs in the block at once
    // add more Values in the same line
    transform: translate(-50%, -50%) scale(0.5);

    opacity: 0;
    // transform: scale(0.5);

    // to create boxes with equal height using table-cell below
    display: table;
    overflow: hidden;

    // last value is to delay transition
    transition: all 0.4s 0.2s;
  }

  &__left {
    width: 35%;

    // grid layout which makes an element behave a bit like a table
    // This will be a table cell - table data (<td></td>).
    // note - the parent element needs to have display:table
    display: table-cell;
  }

  &__right {
    width: 65%;
    padding: 3rem 5rem;

    display: table-cell;

    // table property to align in the middle
    vertical-align: middle;
  }

  &__img {
    display: block;
    width: 100%;
  }

  &__text {
    font-size: 1.4rem;
    margin-bottom: 4rem;

    // NOTE - In general, you shouldn't add PREFIX manually, use auto prefixer tool
    // text columns
    -moz-column-count: 2;
    column-count: 2;

    // default is 1em = 14px because 1em is the font size of current element
    -moz-column-gap: 4rem;
    column-gap: 4rem;

    // border in between
    -moz-column-rule: 1px solid $color-grey-light-2;
    column-rule: 1px solid $color-grey-light-2;

    // to add hyphens at the endline
    // note - to work this correctly have to define this - <html lang="en">
    -moz-hyphens: auto;
    -ms-hyphens: auto;
    // safari & chrome
    -webkit-hyphens: auto;
    hyphens: auto;
  }
}
